files<-paste0(dirW, c[i], "_", c(1:length(sim)), ".rds")
zip(paste0(dirW, c[i], ".zip"), files=files)
file.remove(files)
i=6
# read in undesritezed trees
print(paste0("Reading ", c[i]))
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
for (j in 1:length(sim)){
tryCatch({
print(paste0("Descritizing tree ", j))
## errors with na
##
##### make trees equal with template
sim.d<-make_tree_eq(tree.tmp.final, sim[[j]], round=5)
###
#sim.d<-discr_Simmap_all(sim[[j]], 1000)
sim.d<-discr_Simmap_all(sim.d, 1000)
saveRDS(sim.d, file =  paste0(dirW,c[i], "_", j, ".rds") )
}, error=function(e){
cat("ERROR :",conditionMessage(e), "\n")
#errors<-rbind(errors, c(ii,jj))
}  )
}
# putting rds files into archive
files<-paste0(dirW, c[i], "_", c(1:length(sim)), ".rds")
zip(paste0(dirW, c[i], ".zip"), files=files)
file.remove(files)
i=5
# read in undesritezed trees
print(paste0("Reading ", c[i]))
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
for (j in 1:length(sim)){
tryCatch({
print(paste0("Descritizing tree ", j))
## errors with na
##
##### make trees equal with template
sim.d<-make_tree_eq(tree.tmp.final, sim[[j]], round=5)
###
#sim.d<-discr_Simmap_all(sim[[j]], 1000)
sim.d<-discr_Simmap_all(sim.d, 1000)
saveRDS(sim.d, file =  paste0(dirW,c[i], "_", j, ".rds") )
}, error=function(e){
cat("ERROR :",conditionMessage(e), "\n")
#errors<-rbind(errors, c(ii,jj))
}  )
}
# putting rds files into archive
files<-paste0(dirW, c[i], "_", c(1:length(sim)), ".rds")
zip(paste0(dirW, c[i], ".zip"), files=files)
file.remove(files)
level2
get_descendants_chars(ONT, annotations="manual", level2[3] )
sub(":", "-",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
# mouthparts
sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
ntrees<-1
tr<-vector("list", ntrees)
tr
# mouthparts
cc<-sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
cc
i=1
fl<-paste0(cc, "_", i, ".rds")
fl
stack.L<-vector("list", length(fl))
stack.L
j=1
length(fl)
j=1
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(c[j], ".zip"), " and ", fl[j]))
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
stack.L<-vector("list", length(fl))
for (j in 1:length(fl)){
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
}
stack.L
stack_stm(stack.L)
stack_stm<-function(stm.list){
M<-lapply(stm.list, function(x) x$maps)
M<-lapply(M, function(x) lapply(x, function(y) names(y)))
M<-Reduce(stack2, M)
M.out<-mapply(function(x,y)
{setNames(x, y) },
x=stm.list[[1]]$maps, y=M )
out<-stm.list[[1]]
out$maps<-M.out
return(out)
}
stack_stm(stack.L)
#### stack two discrete stm's lists; x,y are the list of state names (i.e. maps)
stack2<-function(x,y){
mapply(function(x,y)
{paste(x,y, sep="") },
x=x, y=y )
}
stack_stm(stack.L)
tr[[i]]<- stack_stm(stack.L)
tr
plot(tr[[1]])
getPalette
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
z<-tr[[1]]
lapply(z$maps, names) %>% unlist %>% unique->states
states
length(states)
setNames(getPalette(length(states)), states)
colorRampPalette(brewer.pal(9, 'Spectral') %>% rev, space='Lab')
hm.palette <- colorRampPalette(brewer.pal(9, 'Spectral') %>% rev, space='Lab')
color<-hm.palette(8)
color
plot(z, setNames(color, states))
hm.palette <- colorRampPalette(brewer.pal(9, 'Blues'), space='Lab')
color<-hm.palette(8)
plot(z, setNames(color, states))
color
hm.palette <- colorRampPalette(brewer.pal(9, 'Accent') %>% rev, space='Lab')
hm.palette <- colorRampPalette(brewer.pal(2, 'Accent') %>% rev, space='Lab')
hm.palette <- colorRampPalette(brewer.pal(3, 'Accent') %>% rev, space='Lab')
color<-hm.palette(length(states))
plot(z, setNames(color, states))
hm.palette <- colorRampPalette(brewer.pal(3, 'Blues'), space='Lab')
color<-hm.palette(length(states))
plot(z, setNames(color, states))
hm.palette <- colorRampPalette(brewer.pal(9, 'Set1'), space='Lab')
color<-hm.palette(length(states))
plot(z, setNames(color, states))
plot(z, setNames(color, states), show.tip.label=FALSE, edge.width=2)
plot(z, setNames(color, states),  edge.width=2)
plot(z, setNames(color, states),  lwd=2)
plot(z, setNames(color, states),  lwd=6)
plot(z, setNames(color, states),  lwd=4)
plot(z, setNames(color, states),  lwd=4,
tips=F)
plot(z, setNames(color, states),  lwd=4, tips=F)
plot(z, setNames(color, states),  lwd=4, fsize=F)
plot(z, setNames(color, states),  lwd=4, show.tip.label=F)
plotSimmap(z, setNames(color, states),  lwd=4, show.tip.label=F)
plotSimmap(z, setNames(color, states),  lwd=4, fsize=0)
plotSimmap(z, setNames(color, states),  lwd=4, fsize=0.1)
plotSimmap(z, setNames(color, states),  lwd=4, pts=F,ftype="off")
plotSimmap(z, setNames(color, states),  lwd=3, pts=F,ftype="off")
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials")
library("phytools")
# we use a set of precooked functions to work with stoch. maps
source("R_PARAMO/Functions_Discr_maps.R")
# let's make character list
c=paste0("C", AN$CHAR_ID2)
# dir to write and read files
dirW= ("STEP_5/Discr_maps/")
dirR= ("STEP_4/RevBayes/output/")
#####################################
# Read a sample of 100 maps from .stm files and save them in the poper format .stmR
#####################################
i=7
tree<-read_Simmap_Rev(paste0(dirR, c[i], ".stm"),
start=400, end=500,
save = NULL) %>% read.simmap(text=., format="phylip")
write.simmap(tree, file=paste0(dirW, c[i], ".stmR"))
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials")
tree.tmp.final<-read.tree(paste0(dirR,"Hymenoptera_br_resolved.tre") )
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
getwd()
i=7
i=7
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
# read in undesritezed trees
print(paste0("Reading ", c[i]))
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
getwd()
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
getwd()
knitr::opts_knit$set(root.dir= "~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
getwd()
knitr::opts_knit$set(root.dir= "~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
getwd()
library("phytools")
# we use a set of precooked functions to work with stoch. maps
source("R_PARAMO/Functions_Discr_maps.R")
# let's make character list
c=paste0("C", AN$CHAR_ID2)
# dir to write and read files
dirW= ("STEP_5/Discr_maps/")
dirR= ("STEP_4/RevBayes/output/")
for (i in 1:length(c))
{
tree<-read_Simmap_Rev(paste0(dirR, c[i], ".stm"),
start=400, end=500,
save = NULL) %>% read.simmap(text=., format="phylip")
write.simmap(tree, file=paste0(dirW, c[i], ".stmR"))
}
c
sub(",", "-", c  )
c<-sub(",", "-", c  )
for (i in 1:length(c))
{
tree<-read_Simmap_Rev(paste0(dirR, c[i], ".stm"),
start=400, end=500,
save = NULL) %>% read.simmap(text=., format="phylip")
write.simmap(tree, file=paste0(dirW, c[i], ".stmR"))
}
for (i in 1:length(c))
{
# read in undesritezed trees
print(paste0("Reading ", c[i]))
sim=read.simmap(file=paste0(dirW, c[i], ".stmR"), format="phylip")
# descritize trees by looping over sample and saving as rds
for (j in 1:length(sim)){
tryCatch({
print(paste0("Descritizing tree ", j))
## errors with na
##
##### make trees equal with template
sim.d<-make_tree_eq(tree.tmp.final, sim[[j]], round=5)
###
#sim.d<-discr_Simmap_all(sim[[j]], 1000)
sim.d<-discr_Simmap_all(sim.d, 1000)
saveRDS(sim.d, file =  paste0(dirW,c[i], "_", j, ".rds") )
}, error=function(e){
cat("ERROR :",conditionMessage(e), "\n")
#errors<-rbind(errors, c(ii,jj))
}  )
}
# putting rds files into archive
files<-paste0(dirW, c[i], "_", c(1:length(sim)), ".rds")
zip(paste0(dirW, c[i], ".zip"), files=files)
file.remove(files)
}
# mouthparts
cc<-sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
cc
ntrees<-1
tr<-vector("list", ntrees)
i=1
fl<-paste0(cc, "_", i, ".rds")
fl
stack.L<-vector("list", length(fl))
j=1
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
paste0(cc[j], ".zip")
con<-unz(paste0(cc[j], ".zip"), filename=fl[j])
con2 <- gzcon(con)
con2
fl[j]
paste0(dirW, fl[j])
con<-unz(paste0(cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
paste0(dirW, fl[j])
close(con)
con<-unz(paste0(cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
con
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials/STEP_5/Discr_maps")
con<-unz(paste0(cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
tr<-vector("list", ntrees)
tr
for (i in 1:ntrees){
fl<-paste0(cc, "_", i, ".rds")
stack.L<-vector("list", length(fl))
j=1
for (j in 1:length(fl)){
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
}
tr[[i]]<- stack_stm(stack.L)
}
plot(tr[[1]])
ntrees<-100
tr<-vector("list", ntrees)
for (i in 1:ntrees){
fl<-paste0(cc, "_", i, ".rds")
stack.L<-vector("list", length(fl))
j=1
for (j in 1:length(fl)){
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
}
tr[[i]]<- stack_stm(stack.L)
}
tr
cc
plot(tr[[1]])
png(filename='test.png', type='cairo-png')
plot(tr[[1]])
dev.off()
png(filename='test.pdf')
plot(tr[[1]])
dev.off()
pdf(filename='test.pdf')
plot(tr[[1]])
pdf(file='test.pdf')
plot(tr[[1]])
dev.off()
svg(filename='test.png')
plot(tr[[1]])
dev.off()
svg(filename='test.svg')
plot(tr[[1]])
dev.off()
svg(filename='test.svg')
plot(tr[[1]], pts=F,ftype="off")
dev.off()
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
img <- readJPEG("test.pdf")
img <- readJPEG(system.file("pdf", "test.pdf", package="jpeg"))
library("png", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
png(filename='test.svg')
plot(tr[[1]], pts=F,ftype="off")
dev.off()
png(filename='test.png')
plot(tr[[1]], pts=F,ftype="off")
dev.off()
img <- readPNG(system.file("img", "test.png", package="png"))
img <- readPNG(system.file("img", "test.png", package="png"))
jpeg(filename='test.jpg')
plot(tr[[1]], pts=F,ftype="off")
dev.off()
img <- readJPEG(system.file("img", "test.jpg", package="jpeg"))
getwd
getwd()
img <- readJPEG(system.file("img", "test.jpg", package="jpeg"))
system.file("img", "test.jpg", package="jpeg")
readJPEG( "test.jpg")
img<-readJPEG( "test.jpg")
plot(img)
rasterImage(img)
sdcs
dcwc
wd
#plot(tr[[1]])
plot(c(1:10), c(1:10) )
plot(c(1:10), c(1:10) )
#plot(tr[[1]])
plot(c(1:10), c(1:10) )
setwd("~/Documents/Recon-Anc_Anat/Supplementary_materials")
#plot(tr[[1]])
plot(c(1:10), c(1:10) )
#plot(tr[[1]])
plot(c(1:10), c(1:10) )
plot(tr[[1]])
#plot(c(1:10), c(1:10) )
dirW
level2
cc<-sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
cc
level2
i=1
fl<-paste0(cc, "_", i, ".rds")
stack.L<-vector("list", length(fl))
j=1
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
paste0(dirW, cc[j], ".zip")
con<-unz(paste0(dirW, cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
stack.L<-vector("list", length(fl))
for (j in 1:length(fl)){
#con<-unz("CHAR-7.zip", filename="CHAR-7_1.rds")
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(dirW, cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
}
tr[[i]]<- stack_stm(stack.L)
L2
L2
lapply(L2, function(x) sub("CHAR:", "C", x) )
cc
cc<-lapply(L2, function(x) sub("CHAR:", "C", x) )
cc<-sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
cc
cc<-lapply(L2, function(x) sub("CHAR:", "C", x) )
cc<-lapply(cc, function(x) sub(",", "-", x) )
cc
L2
L2.maps<-vector("list", length(L2))
L2.maps
names(L2)
names(L2.maps)<-names(L2)
L2.maps
cc
cc<-sub("CHAR:", "C",
get_descendants_chars(ONT, annotations="manual", level2[3] )  )
cc
tr<-vector("list", ntrees)
paramo<-function(cc, ntrees=10, dirW=c("") )
{
tr<-vector("list", ntrees)
for (i in 1:ntrees){
fl<-paste0(cc, "_", i, ".rds")
stack.L<-vector("list", length(fl))
for (j in 1:length(fl)){
print(paste0("Reading ", paste0(cc[j], ".zip"), " and ", fl[j]))
con<-unz(paste0(dirW, cc[j], ".zip"), filename=paste0(dirW, fl[j]) )
con2 <- gzcon(con)
stack.L[[j]] <- readRDS(con2)
close(con)
}
tr[[i]]<- stack_stm(stack.L)
}
return(tr)
}
paramo(cc, dirW=dirW)
maps
map<-paramo(cc, dirW=dirW)
map
level2
cc<-lapply(L2, function(x) sub("CHAR:", "C", x) )
cc<-lapply(cc, function(x) sub(",", "-", x) )
cc
L2.maps<-vector("list", length(L2))
names(L2.maps)<-names(L2)
L2.maps
cc
i=1
cc[[i]]
map<-paramo(cc[[i]], ntrees=1, dirW=dirW)
L2.maps[[i]]<-map
L2.maps
for (i in 1:length(L2.maps))
{
map<-paramo(cc[[i]], ntrees=1, dirW=dirW)
L2.maps[[i]]<-map
}
L2.maps
for (i in 1:length(L2.maps))
{
map<-paramo(cc[[i]], ntrees=10, dirW=dirW)
L2.maps[[i]]<-map
}
L2.maps
#############
# Level 3 stacks - entire phenotype
#############
L3
#############
# Level 3 stacks - entire phenotype
#############
level3
cc3<-lapply(L3, function(x) sub("CHAR:", "C", x) )
cc3<-lapply(cc3, function(x) sub(",", "-", x) )
cc3
L3.maps<-vector("list", length(L3))
names(L3.maps)<-names(L3)
L3.maps
for (i in 1:length(L3.maps))
{
map<-paramo(cc2[[i]], ntrees=10, dirW=dirW)
L3.maps[[i]]<-map
}
for (i in 1:length(L3.maps))
{
map<-paramo(cc3[[i]], ntrees=10, dirW=dirW)
L3.maps[[i]]<-map
}
L3.maps
plot(L2.maps$head[[1]])
plot(L2.maps$head[[1]], pts=F,ftype="off")
# plotting head characer
plot(L2.maps$head[[1]], pts=F,ftype="off", title="Head")
setwd("~/Documents/Recon-Anc_Anat/PARAMO")
