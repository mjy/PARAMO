rate_matrix := fnFreeK(rates, rescaled=false)
for (i in 1:NUM_STATES) {
  for (j in 1:NUM_STATES) {
    rates[i][j] <-0.0
  }
}
NUM_STATES = 4
for (i in 1:NUM_STATES) {
  for (j in 1:NUM_STATES) {
    rates[i][j] <-0.0
  }
}
rates[3][1]:=r2
rates[4][2]:=r2
rates[1][3]:=r1
rates[4][3]:=r4
rates[2][4]:=r1
rates[3][4]:=r3
#make rate matrix
rate_matrix := fnFreeK(rates, rescaled=false)
rate_matrix
?dnUniform
?mymcmc.burnin
?mymcmc.burnin()
?mcmc.burnin()
mcmc.methods()
q()
?mcmc
q()
chrs_2_read= "data/CHAR:239.char"
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
NUM_STATES=4
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
char_data
char_data.show
()
q()
analysis_name = "CHAR:239"
tree_2_read= "data/Hymenoptera_br_resolved.tre"
chrs_2_read= "data/CHAR:239.char"
mcmc_gen = 5000000
log_freq = 1000
mvi = 0
mni = 0
NUM_STATES = 4
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
psi = readTrees(tree_2_read)[1]
char.data
d
char_data
psi
for (i in 1:NUM_STATES) {
  for (j in 1:NUM_STATES) {
    rates[i][j] <-0.0
  }
}
r2 ~ dnExp(0.1)
r1 ~ dnExp(0.1)
r4 ~ dnExp(0.1)
r3 ~ dnExp(0.1)
moves[++mvi] = mvScale(r2, lambda=0.2, tune=true, weight=2)
moves[++mvi] = mvScale(r1, lambda=0.2, tune=true, weight=2)
moves[++mvi] = mvScale(r4, lambda=0.2, tune=true, weight=2)
moves[++mvi] = mvScale(r3, lambda=0.2, tune=true, weight=2)
#moves[++mvi] = mvScale(r1,lambda=0.2,tune=true,weight=2)
rates[3][1]:=r2
rates[4][2]:=r2
rates[1][3]:=r1
rates[4][3]:=r4
rates[2][4]:=r1rates[3][4]:=r3
rates[2][4]:=r1
rates[3][4]:=r3
# place rate categories into matrix
rate_matrix := fnFreeK(rates, rescaled=false)
rate_matrix
root_freq <- simplex(1,1,1,1)
morpho_ctmc ~ dnPhyloCTMC(Q=rate_matrix, tree=psi, rootFreq=root_freq, branchRates=1.0, type="NaturalNumbers")
morpho_ctmc.clamp(char_data)
mymodel = model(rate_matrix)
str(rate_matrix)
mymodel = model(rate_matrix)
str(mymodel)
mymodel.methods()
mymodel.graph("gr-mode_Rev.txt")
monitors[++mni] = mnModel(filename="output/" + analysis_name + "_param.log", printgen=log_freq)
monitors[++mni] = mnScreen(printgen=log_freq)
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")
q()
exp<-rexp(100, 2)
exp
mean(exp)
exp<-rexp(1000, 2)
mean(exp)
?Mvscale
?mvScale
q()
char_data = readCharacterDataDelimited("data/CHAR:376.char", type="NaturalNumbers", delimiter=" ", stateLabels = 8, headers=false)
char_data
char_data.show()
q()
